module Task2.Loans where

import Task2.Tokens (Transfer(..), Token(..), Holding(..))


template LoanLimit with
    bank : Party
    amount : Decimal
  where
    signatory bank
    -- 1 LoanLimit per bank base on requirements
    -- otherwise we can key it differently to have token or borrower specific limits
    key bank : Party
    maintainer key
    ensure amount >= 0.0

    choice ChangeLimit : ContractId LoanLimit with
        amt : Decimal
      controller bank
      do create this with amount = amt


template LoanRequest with
    bank : Party
    borrower : Party
    token : Token
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0

    choice ApproveRequest : ContractId Loan
      controller bank
      do
        isWithinLimit <-
            try ((>= amount) . (.amount) . snd) <$> fetchByKey @LoanLimit bank
            catch (_ : AnyException) -> pure True -- no limit

        if isWithinLimit
        then create Loan with disbursed = 0.0, ..
        else fail "Loan request exceeds bank limit." 


template Loan with
    bank : Party
    borrower : Party
    token : Token
    amount : Decimal
    disbursed : Decimal
  where
    signatory bank, borrower
    ensure amount > 0.0
        && disbursed >= 0.0
        && disbursed <= amount

    choice Disburse : (ContractId Loan, ContractId Holding) with
        party : Party
        holdingOrMint : Either (ContractId Holding) Decimal
      controller party -- bank or borrower
      do
        (amt, hCid') <- case holdingOrMint of
            Left hCid -> do -- disburse with existing holdings of tokens
                h <- fetch hCid
                (h.amount,) <$> exercise hCid Transfer with party = borrower
            Right mintAmt -> do -- disburse by minting; only for bank issued tokens
                assertMsg "Amount to mint amount must be greater than 0." $ mintAmt > 0.0
                if token.issuer == bank
                then (mintAmt,) <$> create Holding with amount = mintAmt, owner = borrower, ..
                else fail "Unable to mint tokens not issued by bank. Bank should disburse from own holdings instead."
        (, hCid') <$> create this with disbursed = amt + disbursed
