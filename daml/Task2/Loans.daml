module Task2.Loans where

import DA.Optional (isNone)
import Task2.Tokens (Holding(..), Token(..), Transfer(..))


template LoanLimit with
    bank : Party
    token : Token
    amountM : Optional Decimal
    utilised : Decimal
  where
    signatory bank
    -- 1 LoanLimit per bank base on requirements
    -- but relistically different tokens should not consume the same limit
    -- so it should be 1 per bank per token
    key (bank, token) : (Party, Token)
    maintainer key._1
    ensure isNone amountM -- no limit
        || (amountM >= Some 0.0 && Some utilised <= amountM)

    choice ChangeLimit : ContractId LoanLimit with
        amt : Decimal
      controller bank
      do create this with amountM = Some amt
    
    choice TakeLimit : ContractId LoanLimit with
        amt : Decimal
      controller bank
      do create this with utilised = utilised + amt
    
    choice PutLimit : ContractId LoanLimit with
        amt : Decimal
      controller bank
      do create this with utilised = utilised - amt


template LoanRequest with
    bank : Party
    borrower : Party
    token : Token
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0

    choice ApproveRequest : ContractId Loan
      controller bank
      do
        lookupByKey @LoanLimit (bank, token) >>= \case
            Some lCid -> exercise lCid TakeLimit with amt = amount
            _ -> create LoanLimit with amountM = None, utilised = amount, ..
        create Loan with disbursed = 0.0, ..


template Loan with
    bank : Party
    borrower : Party
    token : Token
    amount : Decimal
    disbursed : Decimal
  where
    signatory bank, borrower
    ensure amount > 0.0
        && disbursed >= 0.0
        && disbursed <= amount

    choice Disburse : (ContractId Loan, ContractId Holding) with
        party : Party
        holdingOrMint : Either (ContractId Holding) Decimal
      controller party -- bank or borrower
      do
        (amt, hCid') <- case holdingOrMint of
            Left hCid -> do -- disburse with existing holdings of tokens
                h <- fetch hCid
                (h.amount,) <$> exercise hCid Transfer with party = borrower
            Right mintAmt -> do -- disburse by minting; only for bank issued tokens
                assertMsg "Amount to mint amount must be greater than 0." $ mintAmt > 0.0
                if token.issuer == bank
                then (mintAmt,) <$> create Holding with amount = mintAmt, owner = borrower, ..
                else fail "Unable to mint tokens not issued by bank. Bank should disburse from own holdings instead."
        (, hCid') <$> create this with disbursed = amt + disbursed
